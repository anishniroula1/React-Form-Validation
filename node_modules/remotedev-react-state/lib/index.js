'use strict';

var _remotedev = require('remotedev');

var _remotedev2 = _interopRequireDefault(_remotedev);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getActionName(actionName, state) {
  if (typeof actionName === 'function') {
    return actionName(state);
  }
  return actionName;
}

function connectToDevTools(instance) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!instance) {
    console.error('Please provide react instance as argument of `remotedev-react-state`.');
  }
  options.name = options.name || instance.constructor && 'Component - ' + (instance.constructor.name || 'Unknown');

  var devtools = _remotedev2.default.connectViaExtension(options);
  var initialState = Object.assign({}, instance.state);

  devtools.init(initialState);

  var originSetState = instance.setState;
  instance.setState = function setState(state, callback) {
    var _this = this;

    return originSetState.call(this, state, function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      devtools.send({
        type: getActionName(options.actionName, _this.state) || 'State change',
        state: _this.state
      }, _this.state);
      if (callback) {
        callback.apply(_this, args);
      }
    });
  };

  var unsubscribe = devtools.subscribe(function (message) {
    if (message.type !== 'DISPATCH') return;
    switch (message.payload.type) {
      case 'COMMIT':
        return devtools.init(_remotedev2.default.extractState(message));
      case 'RESET':
        devtools.init(initialState);
        return originSetState.call(instance, initialState);
      case 'ROLLBACK':
        return devtools.init(_remotedev2.default.extractState(message));
      case 'JUMP_TO_STATE':
      case 'JUMP_TO_ACTION':
        originSetState.call(instance, _remotedev2.default.extractState(message));
    }
  });

  var originCWUM = instance.componentWillUnMount;
  instance.componentWillUnMount = function () {
    unsubscribe();
    originCWUM.call(instance);
  };
}

/**
 * Create `connectToDevTools` function can be used for component `ref` prop.
 * 
 * Example:
 *   <App ref={connectToDevTools.ref(options)} />
 */
connectToDevTools.ref = function (options) {
  return function (ref) {
    return connectToDevTools(ref, options);
  };
};

module.exports = connectToDevTools;