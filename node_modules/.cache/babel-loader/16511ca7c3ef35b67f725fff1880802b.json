{"ast":null,"code":"const regex = {\n  email: new RegExp('^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+)*)|(.+))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$'),\n  number: new RegExp('^[0-9]+$'),\n  strongPassword: new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\"),\n  mediumPassword: new RegExp(\"^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})\")\n};\nexport class Validators {\n  static email(value, message) {\n    if (value) {\n      const result = regex.email.test(value);\n      if (!result) return {\n        error: true,\n        message\n      };\n    } // return false;\n\n  }\n\n  static password(value, message) {\n    if (value) {\n      const result = regex.strongPassword.test(value);\n      if (!result) return {\n        error: true,\n        message\n      };\n    }\n\n    return false;\n  }\n\n  static required(value, message) {\n    if (!value || !value.toString().trim().length) {\n      return {\n        error: true,\n        message\n      };\n    }\n\n    return false;\n  }\n\n  static number(value, message) {\n    const length = value ? value.toString().length : 0;\n\n    if (length > 0) {\n      const result = regex.number.test(value);\n\n      if (!result) {\n        return {\n          error: true,\n          message\n        };\n      }\n    }\n\n    return false;\n  }\n\n}\nexport const validateInput = (validators, value) => {\n  if (validators && validators.length) {\n    for (let i = 0; i < validators.length; i++) {\n      const error = validators[i].check(value, validators[i].message);\n\n      if (error) {\n        return error;\n      }\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/anishniroula/Documents/todo/src/library/Validator.js"],"names":["regex","email","RegExp","number","strongPassword","mediumPassword","Validators","value","message","result","test","error","password","required","toString","trim","length","validateInput","validators","i","check"],"mappings":"AAAA,MAAMA,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,IAAIC,MAAJ,CACH,qKADG,CADG;AAIVC,EAAAA,MAAM,EAAE,IAAID,MAAJ,CAAW,UAAX,CAJE;AAKVE,EAAAA,cAAc,EAAE,IAAIF,MAAJ,CAAW,gEAAX,CALN;AAMVG,EAAAA,cAAc,EAAE,IAAIH,MAAJ,CAAW,wFAAX;AANN,CAAd;AASA,OAAO,MAAMI,UAAN,CAAiB;AACpB,SAAOL,KAAP,CAAaM,KAAb,EAAoBC,OAApB,EAA6B;AACzB,QAAID,KAAJ,EAAW;AACP,YAAME,MAAM,GAAGT,KAAK,CAACC,KAAN,CAAYS,IAAZ,CAAiBH,KAAjB,CAAf;AACA,UAAI,CAACE,MAAL,EAAa,OAAO;AAAEE,QAAAA,KAAK,EAAE,IAAT;AAAeH,QAAAA;AAAf,OAAP;AAChB,KAJwB,CAKzB;;AACH;;AAED,SAAOI,QAAP,CAAgBL,KAAhB,EAAuBC,OAAvB,EAAgC;AAC5B,QAAID,KAAJ,EAAW;AACP,YAAME,MAAM,GAAGT,KAAK,CAACI,cAAN,CAAqBM,IAArB,CAA0BH,KAA1B,CAAf;AACA,UAAI,CAACE,MAAL,EAAa,OAAO;AAAEE,QAAAA,KAAK,EAAE,IAAT;AAAeH,QAAAA;AAAf,OAAP;AAChB;;AACD,WAAO,KAAP;AACH;;AAED,SAAOK,QAAP,CAAgBN,KAAhB,EAAuBC,OAAvB,EAAgC;AAC5B,QAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACO,QAAN,GAAiBC,IAAjB,GAAwBC,MAAvC,EAA+C;AAC3C,aAAO;AAAEL,QAAAA,KAAK,EAAE,IAAT;AAAeH,QAAAA;AAAf,OAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAED,SAAOL,MAAP,CAAcI,KAAd,EAAqBC,OAArB,EAA8B;AAC1B,UAAMQ,MAAM,GAAGT,KAAK,GAAGA,KAAK,CAACO,QAAN,GAAiBE,MAApB,GAA6B,CAAjD;;AAEA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACZ,YAAMP,MAAM,GAAGT,KAAK,CAACG,MAAN,CAAaO,IAAb,CAAkBH,KAAlB,CAAf;;AACA,UAAI,CAACE,MAAL,EAAa;AACT,eAAO;AAAEE,UAAAA,KAAK,EAAE,IAAT;AAAeH,UAAAA;AAAf,SAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH;;AAnCmB;AAsCxB,OAAO,MAAMS,aAAa,GAAG,CAACC,UAAD,EAAaX,KAAb,KAAuB;AAChD,MAAIW,UAAU,IAAIA,UAAU,CAACF,MAA7B,EAAqC;AACjC,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACF,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AACxC,YAAMR,KAAK,GAAGO,UAAU,CAACC,CAAD,CAAV,CAAcC,KAAd,CAAoBb,KAApB,EAA2BW,UAAU,CAACC,CAAD,CAAV,CAAcX,OAAzC,CAAd;;AACA,UAAIG,KAAJ,EAAW;AACP,eAAOA,KAAP;AACH;AACJ;AACJ;;AACD,SAAO,KAAP;AACH,CAVM","sourcesContent":["const regex = {\n    email: new RegExp(\n        '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@]+)*)|(.+))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$',\n    ),\n    number: new RegExp('^[0-9]+$'),\n    strongPassword: new RegExp(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\"),\n    mediumPassword: new RegExp(\"^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})\")\n};\n\nexport class Validators {\n    static email(value, message) {\n        if (value) {\n            const result = regex.email.test(value);\n            if (!result) return { error: true, message };\n        }\n        // return false;\n    }\n\n    static password(value, message) {\n        if (value) {\n            const result = regex.strongPassword.test(value);\n            if (!result) return { error: true, message };\n        }\n        return false;\n    }\n\n    static required(value, message) {\n        if (!value || !value.toString().trim().length) {\n            return { error: true, message };\n        }\n        return false;\n    }\n\n    static number(value, message) {\n        const length = value ? value.toString().length : 0;\n\n        if (length > 0) {\n            const result = regex.number.test(value);\n            if (!result) {\n                return { error: true, message };\n            }\n        }\n\n        return false;\n    }\n}\n\nexport const validateInput = (validators, value) => {\n    if (validators && validators.length) {\n        for (let i = 0; i < validators.length; i++) {\n            const error = validators[i].check(value, validators[i].message);\n            if (error) {\n                return error;\n            }\n        }\n    }\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}