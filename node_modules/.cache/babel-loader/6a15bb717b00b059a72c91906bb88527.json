{"ast":null,"code":"var _jsxFileName = \"/Users/anishniroula/Documents/todo/src/core/textbox.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport { validateInput } from \"../library/Validator\";\nimport { GotFormErrorAction } from \"./form-error.Actions\";\n\nconst TextBox = ({\n  question,\n  onChange,\n  formError\n}) => {\n  const dispatch = useDispatch();\n  const [error, setError] = useState({\n    error: false,\n    message: ' '\n  });\n\n  const handleChange = event => {\n    const {\n      value\n    } = event.target;\n    onChange(value);\n  };\n\n  const sendTrueValue = () => {\n    if (!!error && error.message) {\n      dispatch(GotFormErrorAction(true));\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 20\n        }\n      }, error.message);\n    }\n  };\n\n  const handleBlur = event => {\n    const {\n      value\n    } = event.target;\n    const requiredValidators = !!question.required && [{\n      check: question.required.validator,\n      message: question.required.message\n    }];\n    setTimeout(setError(validateInput(requiredValidators, value)), 3000);\n\n    if (error) {\n      formError(error);\n    }\n\n    if (!error) {\n      formError(error);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, question.label && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"app-input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }\n  }, question.label), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: question.key,\n    type: !question.type ? 'text' : question.type,\n    value: question.value,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }), sendTrueValue());\n};\n\nTextBox.propTypes = {\n  value: PropTypes.string || PropTypes.number,\n  onChange: PropTypes.func.isRequired\n};\nTextBox.defaultProps = {\n  value: ''\n};\nexport default TextBox;","map":{"version":3,"sources":["/Users/anishniroula/Documents/todo/src/core/textbox.js"],"names":["React","useState","PropTypes","useDispatch","validateInput","GotFormErrorAction","TextBox","question","onChange","formError","dispatch","error","setError","message","handleChange","event","value","target","sendTrueValue","handleBlur","requiredValidators","required","check","validator","setTimeout","label","key","type","propTypes","string","number","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {useDispatch} from \"react-redux\";\n\nimport {validateInput} from \"../library/Validator\";\nimport {GotFormErrorAction} from \"./form-error.Actions\";\n\nconst TextBox = ({question, onChange, formError}) => {\n    const dispatch = useDispatch();\n    const [error, setError] = useState({error: false, message: ' '});\n    const handleChange = (event) => {\n        const {value} = event.target;\n        onChange(value);\n    };\n\n    const sendTrueValue = () => {\n        if (!!error && error.message){\n            dispatch(GotFormErrorAction(true));\n            return <span>{error.message}</span>\n        }\n    };\n\n    const handleBlur = (event) => {\n        const {value} = event.target;\n        const requiredValidators = !!question.required && [\n            {check: question.required.validator, message: question.required.message}\n        ];\n        setTimeout(setError(validateInput(requiredValidators, value)), 3000);\n        if(error) {\n            formError(error);\n        }\n        if(!error) {\n            formError(error)\n        }\n    };\n\n    return (\n        <div>\n            {question.label && <label htmlFor=\"app-input-field\">{question.label}</label>}\n            <br/>\n            <input\n                name={question.key}\n                type={!question.type ? 'text' : question.type}\n                value={question.value}\n                onChange={handleChange}\n                onBlur={handleBlur}\n            /><br/>\n            {sendTrueValue()}\n        </div>\n    )\n};\n\nTextBox.propTypes = {\n    value: PropTypes.string || PropTypes.number,\n    onChange: PropTypes.func.isRequired,\n};\n\nTextBox.defaultProps = {\n    value: '',\n};\n\nexport default TextBox;\n"]},"metadata":{},"sourceType":"module"}