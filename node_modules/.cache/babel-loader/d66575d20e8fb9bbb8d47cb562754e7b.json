{"ast":null,"code":"var Emitter = require('component-emitter');\n\nvar SCChannel = require('sc-channel').SCChannel;\n\nvar Response = require('./response').Response;\n\nvar AuthEngine = require('./auth').AuthEngine;\n\nvar formatter = require('sc-formatter');\n\nvar SCTransport = require('./sctransport').SCTransport;\n\nvar querystring = require('querystring');\n\nvar LinkedList = require('linked-list');\n\nvar base64 = require('base-64');\n\nvar clone = require('clone');\n\nvar scErrors = require('sc-errors');\n\nvar InvalidArgumentsError = scErrors.InvalidArgumentsError;\nvar InvalidMessageError = scErrors.InvalidMessageError;\nvar InvalidActionError = scErrors.InvalidActionError;\nvar SocketProtocolError = scErrors.SocketProtocolError;\nvar TimeoutError = scErrors.TimeoutError;\nvar BadConnectionError = scErrors.BadConnectionError;\nvar isBrowser = typeof window != 'undefined';\n\nvar SCClientSocket = function (opts) {\n  var self = this;\n  Emitter.call(this);\n  this.id = null;\n  this.state = this.CLOSED;\n  this.authState = this.UNAUTHENTICATED;\n  this.signedAuthToken = null;\n  this.authToken = null;\n  this.pendingReconnect = false;\n  this.pendingReconnectTimeout = null;\n  this.preparingPendingSubscriptions = false;\n  this.clientId = opts.clientId;\n  this.connectTimeout = opts.connectTimeout;\n  this.ackTimeout = opts.ackTimeout;\n  this.channelPrefix = opts.channelPrefix || null;\n  this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;\n  this.authTokenName = opts.authTokenName; // pingTimeout will be ackTimeout at the start, but it will\n  // be updated with values provided by the 'connect' event\n\n  this.pingTimeout = this.ackTimeout;\n  this.pingTimeoutDisabled = !!opts.pingTimeoutDisabled;\n  this.active = true;\n  this._clientMap = opts.clientMap || {};\n  var maxTimeout = Math.pow(2, 31) - 1;\n\n  var verifyDuration = function (propertyName) {\n    if (self[propertyName] > maxTimeout) {\n      throw new InvalidArgumentsError('The ' + propertyName + ' value provided exceeded the maximum amount allowed');\n    }\n  };\n\n  verifyDuration('connectTimeout');\n  verifyDuration('ackTimeout');\n  this._localEvents = {\n    'connect': 1,\n    'connectAbort': 1,\n    'close': 1,\n    'disconnect': 1,\n    'message': 1,\n    'error': 1,\n    'raw': 1,\n    'kickOut': 1,\n    'subscribe': 1,\n    'unsubscribe': 1,\n    'subscribeStateChange': 1,\n    'authStateChange': 1,\n    'authenticate': 1,\n    'deauthenticate': 1,\n    'removeAuthToken': 1,\n    'subscribeRequest': 1\n  };\n  this.connectAttempts = 0;\n  this._emitBuffer = new LinkedList();\n  this.channels = {};\n  this.options = opts;\n  this._cid = 1;\n\n  this.options.callIdGenerator = function () {\n    return self._cid++;\n  };\n\n  if (this.options.autoReconnect) {\n    if (this.options.autoReconnectOptions == null) {\n      this.options.autoReconnectOptions = {};\n    } // Add properties to the this.options.autoReconnectOptions object.\n    // We assign the reference to a reconnectOptions variable to avoid repetition.\n\n\n    var reconnectOptions = this.options.autoReconnectOptions;\n\n    if (reconnectOptions.initialDelay == null) {\n      reconnectOptions.initialDelay = 10000;\n    }\n\n    if (reconnectOptions.randomness == null) {\n      reconnectOptions.randomness = 10000;\n    }\n\n    if (reconnectOptions.multiplier == null) {\n      reconnectOptions.multiplier = 1.5;\n    }\n\n    if (reconnectOptions.maxDelay == null) {\n      reconnectOptions.maxDelay = 60000;\n    }\n  }\n\n  if (this.options.subscriptionRetryOptions == null) {\n    this.options.subscriptionRetryOptions = {};\n  }\n\n  if (this.options.authEngine) {\n    this.auth = this.options.authEngine;\n  } else {\n    this.auth = new AuthEngine();\n  }\n\n  if (this.options.codecEngine) {\n    this.codec = this.options.codecEngine;\n  } else {\n    // Default codec engine\n    this.codec = formatter;\n  }\n\n  this.options.path = this.options.path.replace(/\\/$/, '') + '/';\n  this.options.query = opts.query || {};\n\n  if (typeof this.options.query == 'string') {\n    this.options.query = querystring.parse(this.options.query);\n  }\n\n  this._channelEmitter = new Emitter();\n\n  this._unloadHandler = function () {\n    self.disconnect();\n  };\n\n  if (isBrowser && this.disconnectOnUnload && global.addEventListener) {\n    global.addEventListener('beforeunload', this._unloadHandler, false);\n  }\n\n  this._clientMap[this.clientId] = this;\n\n  if (this.options.autoConnect) {\n    this.connect();\n  }\n};\n\nSCClientSocket.prototype = Object.create(Emitter.prototype);\nSCClientSocket.CONNECTING = SCClientSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;\nSCClientSocket.OPEN = SCClientSocket.prototype.OPEN = SCTransport.prototype.OPEN;\nSCClientSocket.CLOSED = SCClientSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;\nSCClientSocket.AUTHENTICATED = SCClientSocket.prototype.AUTHENTICATED = 'authenticated';\nSCClientSocket.UNAUTHENTICATED = SCClientSocket.prototype.UNAUTHENTICATED = 'unauthenticated';\nSCClientSocket.PENDING = SCClientSocket.prototype.PENDING = 'pending';\nSCClientSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;\nSCClientSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;\nSCClientSocket.prototype._privateEventHandlerMap = {\n  '#publish': function (data) {\n    var undecoratedChannelName = this._undecorateChannelName(data.channel);\n\n    var isSubscribed = this.isSubscribed(undecoratedChannelName, true);\n\n    if (isSubscribed) {\n      this._channelEmitter.emit(undecoratedChannelName, data.data);\n    }\n  },\n  '#kickOut': function (data) {\n    var undecoratedChannelName = this._undecorateChannelName(data.channel);\n\n    var channel = this.channels[undecoratedChannelName];\n\n    if (channel) {\n      Emitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);\n      channel.emit('kickOut', data.message, undecoratedChannelName);\n\n      this._triggerChannelUnsubscribe(channel);\n    }\n  },\n  '#setAuthToken': function (data, response) {\n    var self = this;\n\n    if (data) {\n      var triggerAuthenticate = function (err) {\n        if (err) {\n          // This is a non-fatal error, we don't want to close the connection\n          // because of this but we do want to notify the server and throw an error\n          // on the client.\n          response.error(err);\n\n          self._onSCError(err);\n        } else {\n          self._changeToAuthenticatedState(data.token);\n\n          response.end();\n        }\n      };\n\n      this.auth.saveToken(this.authTokenName, data.token, {}, triggerAuthenticate);\n    } else {\n      response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));\n    }\n  },\n  '#removeAuthToken': function (data, response) {\n    var self = this;\n    this.auth.removeToken(this.authTokenName, function (err, oldToken) {\n      if (err) {\n        // Non-fatal error - Do not close the connection\n        response.error(err);\n\n        self._onSCError(err);\n      } else {\n        Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);\n\n        self._changeToUnauthenticatedStateAndClearTokens();\n\n        response.end();\n      }\n    });\n  },\n  '#disconnect': function (data) {\n    this.transport.close(data.code, data.data);\n  }\n};\n\nSCClientSocket.prototype.getState = function () {\n  return this.state;\n};\n\nSCClientSocket.prototype.getBytesReceived = function () {\n  return this.transport.getBytesReceived();\n};\n\nSCClientSocket.prototype.deauthenticate = function (callback) {\n  var self = this;\n  this.auth.removeToken(this.authTokenName, function (err, oldToken) {\n    if (err) {\n      // Non-fatal error - Do not close the connection\n      self._onSCError(err);\n    } else {\n      Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);\n\n      if (self.state != self.CLOSED) {\n        self.emit('#removeAuthToken');\n      }\n\n      self._changeToUnauthenticatedStateAndClearTokens();\n    }\n\n    callback && callback(err);\n  });\n};\n\nSCClientSocket.prototype.connect = SCClientSocket.prototype.open = function () {\n  var self = this;\n\n  if (!this.active) {\n    var error = new InvalidActionError('Cannot connect a destroyed client');\n\n    this._onSCError(error);\n\n    return;\n  }\n\n  if (this.state == this.CLOSED) {\n    this.pendingReconnect = false;\n    this.pendingReconnectTimeout = null;\n    clearTimeout(this._reconnectTimeoutRef);\n    this.state = this.CONNECTING;\n    Emitter.prototype.emit.call(this, 'connecting');\n\n    if (this.transport) {\n      this.transport.off();\n    }\n\n    this.transport = new SCTransport(this.auth, this.codec, this.options);\n    this.transport.on('open', function (status) {\n      self.state = self.OPEN;\n\n      self._onSCOpen(status);\n    });\n    this.transport.on('error', function (err) {\n      self._onSCError(err);\n    });\n    this.transport.on('close', function (code, data) {\n      self.state = self.CLOSED;\n\n      self._onSCClose(code, data);\n    });\n    this.transport.on('openAbort', function (code, data) {\n      self.state = self.CLOSED;\n\n      self._onSCClose(code, data, true);\n    });\n    this.transport.on('event', function (event, data, res) {\n      self._onSCEvent(event, data, res);\n    });\n  }\n};\n\nSCClientSocket.prototype.reconnect = function (code, data) {\n  this.disconnect(code, data);\n  this.connect();\n};\n\nSCClientSocket.prototype.disconnect = function (code, data) {\n  code = code || 1000;\n\n  if (typeof code != 'number') {\n    throw new InvalidArgumentsError('If specified, the code argument must be a number');\n  }\n\n  if (this.state == this.OPEN || this.state == this.CONNECTING) {\n    this.transport.close(code, data);\n  } else {\n    this.pendingReconnect = false;\n    this.pendingReconnectTimeout = null;\n    clearTimeout(this._reconnectTimeoutRef);\n  }\n};\n\nSCClientSocket.prototype.destroy = function (code, data) {\n  if (isBrowser && global.removeEventListener) {\n    global.removeEventListener('beforeunload', this._unloadHandler, false);\n  }\n\n  this.active = false;\n  this.disconnect(code, data);\n  delete this._clientMap[this.clientId];\n};\n\nSCClientSocket.prototype._changeToUnauthenticatedStateAndClearTokens = function () {\n  if (this.authState != this.UNAUTHENTICATED) {\n    var oldState = this.authState;\n    var oldSignedToken = this.signedAuthToken;\n    this.authState = this.UNAUTHENTICATED;\n    this.signedAuthToken = null;\n    this.authToken = null;\n    var stateChangeData = {\n      oldState: oldState,\n      newState: this.authState\n    };\n    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);\n    Emitter.prototype.emit.call(this, 'deauthenticate', oldSignedToken);\n  }\n};\n\nSCClientSocket.prototype._changeToAuthenticatedState = function (signedAuthToken) {\n  this.signedAuthToken = signedAuthToken;\n  this.authToken = this._extractAuthTokenData(signedAuthToken);\n\n  if (this.authState != this.AUTHENTICATED) {\n    var oldState = this.authState;\n    this.authState = this.AUTHENTICATED;\n    var stateChangeData = {\n      oldState: oldState,\n      newState: this.authState,\n      signedAuthToken: signedAuthToken,\n      authToken: this.authToken\n    };\n\n    if (!this.preparingPendingSubscriptions) {\n      this.processPendingSubscriptions();\n    }\n\n    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);\n  }\n\n  Emitter.prototype.emit.call(this, 'authenticate', signedAuthToken);\n};\n\nSCClientSocket.prototype.decodeBase64 = function (encodedString) {\n  var decodedString;\n\n  if (typeof Buffer == 'undefined') {\n    if (global.atob) {\n      decodedString = global.atob(encodedString);\n    } else {\n      decodedString = base64.decode(encodedString);\n    }\n  } else {\n    var buffer = new Buffer(encodedString, 'base64');\n    decodedString = buffer.toString('utf8');\n  }\n\n  return decodedString;\n};\n\nSCClientSocket.prototype.encodeBase64 = function (decodedString) {\n  var encodedString;\n\n  if (typeof Buffer == 'undefined') {\n    if (global.btoa) {\n      encodedString = global.btoa(decodedString);\n    } else {\n      encodedString = base64.encode(decodedString);\n    }\n  } else {\n    var buffer = new Buffer(decodedString, 'utf8');\n    encodedString = buffer.toString('base64');\n  }\n\n  return encodedString;\n};\n\nSCClientSocket.prototype._extractAuthTokenData = function (signedAuthToken) {\n  var tokenParts = (signedAuthToken || '').split('.');\n  var encodedTokenData = tokenParts[1];\n\n  if (encodedTokenData != null) {\n    var tokenData = encodedTokenData;\n\n    try {\n      tokenData = this.decodeBase64(tokenData);\n      return JSON.parse(tokenData);\n    } catch (e) {\n      return tokenData;\n    }\n  }\n\n  return null;\n};\n\nSCClientSocket.prototype.getAuthToken = function () {\n  return this.authToken;\n};\n\nSCClientSocket.prototype.getSignedAuthToken = function () {\n  return this.signedAuthToken;\n}; // Perform client-initiated authentication by providing an encrypted token string.\n\n\nSCClientSocket.prototype.authenticate = function (signedAuthToken, callback) {\n  var self = this;\n  this.emit('#authenticate', signedAuthToken, function (err, authStatus) {\n    if (authStatus && authStatus.isAuthenticated != null) {\n      // If authStatus is correctly formatted (has an isAuthenticated property),\n      // then we will rehydrate the authError.\n      if (authStatus.authError) {\n        authStatus.authError = scErrors.hydrateError(authStatus.authError);\n      }\n    } else {\n      // Some errors like BadConnectionError and TimeoutError will not pass a valid\n      // authStatus object to the current function, so we need to create it ourselves.\n      authStatus = {\n        isAuthenticated: self.authState,\n        authError: null\n      };\n    }\n\n    if (err) {\n      if (err.name != 'BadConnectionError' && err.name != 'TimeoutError') {\n        // In case of a bad/closed connection or a timeout, we maintain the last\n        // known auth state since those errors don't mean that the token is invalid.\n        self._changeToUnauthenticatedStateAndClearTokens();\n      }\n\n      callback && callback(err, authStatus);\n    } else {\n      self.auth.saveToken(self.authTokenName, signedAuthToken, {}, function (err) {\n        if (err) {\n          self._onSCError(err);\n        }\n\n        if (authStatus.isAuthenticated) {\n          self._changeToAuthenticatedState(signedAuthToken);\n        } else {\n          self._changeToUnauthenticatedStateAndClearTokens();\n        }\n\n        callback && callback(err, authStatus);\n      });\n    }\n  });\n};\n\nSCClientSocket.prototype._tryReconnect = function (initialDelay) {\n  var self = this;\n  var exponent = this.connectAttempts++;\n  var reconnectOptions = this.options.autoReconnectOptions;\n  var timeout;\n\n  if (initialDelay == null || exponent > 0) {\n    var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());\n    timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));\n  } else {\n    timeout = initialDelay;\n  }\n\n  if (timeout > reconnectOptions.maxDelay) {\n    timeout = reconnectOptions.maxDelay;\n  }\n\n  clearTimeout(this._reconnectTimeoutRef);\n  this.pendingReconnect = true;\n  this.pendingReconnectTimeout = timeout;\n  this._reconnectTimeoutRef = setTimeout(function () {\n    self.connect();\n  }, timeout);\n};\n\nSCClientSocket.prototype._onSCOpen = function (status) {\n  var self = this;\n  this.preparingPendingSubscriptions = true;\n\n  if (status) {\n    this.id = status.id;\n    this.pingTimeout = status.pingTimeout;\n    this.transport.pingTimeout = this.pingTimeout;\n\n    if (status.isAuthenticated) {\n      this._changeToAuthenticatedState(status.authToken);\n    } else {\n      this._changeToUnauthenticatedStateAndClearTokens();\n    }\n  } else {\n    // This can happen if auth.loadToken (in sctransport.js) fails with\n    // an error - This means that the signedAuthToken cannot be loaded by\n    // the auth engine and therefore, we need to unauthenticate the client.\n    this._changeToUnauthenticatedStateAndClearTokens();\n  }\n\n  this.connectAttempts = 0;\n\n  if (this.options.autoSubscribeOnConnect) {\n    this.processPendingSubscriptions();\n  } // If the user invokes the callback while in autoSubscribeOnConnect mode, it\n  // won't break anything.\n\n\n  Emitter.prototype.emit.call(this, 'connect', status, function () {\n    self.processPendingSubscriptions();\n  });\n\n  if (this.state == this.OPEN) {\n    this._flushEmitBuffer();\n  }\n};\n\nSCClientSocket.prototype._onSCError = function (err) {\n  var self = this; // Throw error in different stack frame so that error handling\n  // cannot interfere with a reconnect action.\n\n  setTimeout(function () {\n    if (self.listeners('error').length < 1) {\n      throw err;\n    } else {\n      Emitter.prototype.emit.call(self, 'error', err);\n    }\n  }, 0);\n};\n\nSCClientSocket.prototype._suspendSubscriptions = function () {\n  var channel, newState;\n\n  for (var channelName in this.channels) {\n    if (this.channels.hasOwnProperty(channelName)) {\n      channel = this.channels[channelName];\n\n      if (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING) {\n        newState = channel.PENDING;\n      } else {\n        newState = channel.UNSUBSCRIBED;\n      }\n\n      this._triggerChannelUnsubscribe(channel, newState);\n    }\n  }\n};\n\nSCClientSocket.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {\n  var currentNode = this._emitBuffer.head;\n  var nextNode;\n\n  while (currentNode) {\n    nextNode = currentNode.next;\n    var eventObject = currentNode.data;\n    clearTimeout(eventObject.timeout);\n    delete eventObject.timeout;\n    currentNode.detach();\n    currentNode = nextNode;\n    var callback = eventObject.callback;\n\n    if (callback) {\n      delete eventObject.callback;\n      var errorMessage = \"Event '\" + eventObject.event + \"' was aborted due to a bad connection\";\n      var error = new BadConnectionError(errorMessage, failureType);\n      callback.call(eventObject, error, eventObject);\n    } // Cleanup any pending response callback in the transport layer too.\n\n\n    if (eventObject.cid) {\n      this.transport.cancelPendingResponse(eventObject.cid);\n    }\n  }\n};\n\nSCClientSocket.prototype._onSCClose = function (code, data, openAbort) {\n  var self = this;\n  this.id = null;\n\n  if (this.transport) {\n    this.transport.off();\n  }\n\n  this.pendingReconnect = false;\n  this.pendingReconnectTimeout = null;\n  clearTimeout(this._reconnectTimeoutRef);\n\n  this._suspendSubscriptions();\n\n  this._abortAllPendingEventsDueToBadConnection(openAbort ? 'connectAbort' : 'disconnect'); // Try to reconnect\n  // on server ping timeout (4000)\n  // or on client pong timeout (4001)\n  // or on close without status (1005)\n  // or on handshake failure (4003)\n  // or on handshake rejection (4008)\n  // or on socket hung up (1006)\n\n\n  if (this.options.autoReconnect) {\n    if (code == 4000 || code == 4001 || code == 1005) {\n      // If there is a ping or pong timeout or socket closes without\n      // status, don't wait before trying to reconnect - These could happen\n      // if the client wakes up after a period of inactivity and in this case we\n      // want to re-establish the connection as soon as possible.\n      this._tryReconnect(0); // Codes 4500 and above will be treated as permanent disconnects.\n      // Socket will not try to auto-reconnect.\n\n    } else if (code != 1000 && code < 4500) {\n      this._tryReconnect();\n    }\n  }\n\n  if (openAbort) {\n    Emitter.prototype.emit.call(self, 'connectAbort', code, data);\n  } else {\n    Emitter.prototype.emit.call(self, 'disconnect', code, data);\n  }\n\n  Emitter.prototype.emit.call(self, 'close', code, data);\n\n  if (!SCClientSocket.ignoreStatuses[code]) {\n    var closeMessage;\n\n    if (data) {\n      closeMessage = 'Socket connection closed with status code ' + code + ' and reason: ' + data;\n    } else {\n      closeMessage = 'Socket connection closed with status code ' + code;\n    }\n\n    var err = new SocketProtocolError(SCClientSocket.errorStatuses[code] || closeMessage, code);\n\n    this._onSCError(err);\n  }\n};\n\nSCClientSocket.prototype._onSCEvent = function (event, data, res) {\n  var handler = this._privateEventHandlerMap[event];\n\n  if (handler) {\n    handler.call(this, data, res);\n  } else {\n    Emitter.prototype.emit.call(this, event, data, function () {\n      res && res.callback.apply(res, arguments);\n    });\n  }\n};\n\nSCClientSocket.prototype.decode = function (message) {\n  return this.transport.decode(message);\n};\n\nSCClientSocket.prototype.encode = function (object) {\n  return this.transport.encode(object);\n};\n\nSCClientSocket.prototype._flushEmitBuffer = function () {\n  var currentNode = this._emitBuffer.head;\n  var nextNode;\n\n  while (currentNode) {\n    nextNode = currentNode.next;\n    var eventObject = currentNode.data;\n    currentNode.detach();\n    this.transport.emitObject(eventObject);\n    currentNode = nextNode;\n  }\n};\n\nSCClientSocket.prototype._handleEventAckTimeout = function (eventObject, eventNode) {\n  if (eventNode) {\n    eventNode.detach();\n  }\n\n  delete eventObject.timeout;\n  var callback = eventObject.callback;\n\n  if (callback) {\n    delete eventObject.callback;\n    var error = new TimeoutError(\"Event response for '\" + eventObject.event + \"' timed out\");\n    callback.call(eventObject, error, eventObject);\n  } // Cleanup any pending response callback in the transport layer too.\n\n\n  if (eventObject.cid) {\n    this.transport.cancelPendingResponse(eventObject.cid);\n  }\n};\n\nSCClientSocket.prototype._emit = function (event, data, callback) {\n  var self = this;\n\n  if (this.state == this.CLOSED) {\n    this.connect();\n  }\n\n  var eventObject = {\n    event: event,\n    callback: callback\n  };\n  var eventNode = new LinkedList.Item();\n\n  if (this.options.cloneData) {\n    eventObject.data = clone(data);\n  } else {\n    eventObject.data = data;\n  }\n\n  eventNode.data = eventObject;\n  eventObject.timeout = setTimeout(function () {\n    self._handleEventAckTimeout(eventObject, eventNode);\n  }, this.ackTimeout);\n\n  this._emitBuffer.append(eventNode);\n\n  if (this.state == this.OPEN) {\n    this._flushEmitBuffer();\n  }\n};\n\nSCClientSocket.prototype.send = function (data) {\n  this.transport.send(data);\n};\n\nSCClientSocket.prototype.emit = function (event, data, callback) {\n  if (this._localEvents[event] == null) {\n    this._emit(event, data, callback);\n  } else if (event == 'error') {\n    Emitter.prototype.emit.call(this, event, data);\n  } else {\n    var error = new InvalidActionError('The \"' + event + '\" event is reserved and cannot be emitted on a client socket');\n\n    this._onSCError(error);\n  }\n};\n\nSCClientSocket.prototype.publish = function (channelName, data, callback) {\n  var pubData = {\n    channel: this._decorateChannelName(channelName),\n    data: data\n  };\n  this.emit('#publish', pubData, callback);\n};\n\nSCClientSocket.prototype._triggerChannelSubscribe = function (channel, subscriptionOptions) {\n  var channelName = channel.name;\n\n  if (channel.state != channel.SUBSCRIBED) {\n    var oldState = channel.state;\n    channel.state = channel.SUBSCRIBED;\n    var stateChangeData = {\n      channel: channelName,\n      oldState: oldState,\n      newState: channel.state,\n      subscriptionOptions: subscriptionOptions\n    };\n    channel.emit('subscribeStateChange', stateChangeData);\n    channel.emit('subscribe', channelName, subscriptionOptions);\n    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);\n    Emitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);\n  }\n};\n\nSCClientSocket.prototype._triggerChannelSubscribeFail = function (err, channel, subscriptionOptions) {\n  var channelName = channel.name;\n  var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;\n\n  if (channel.state != channel.UNSUBSCRIBED && meetsAuthRequirements) {\n    channel.state = channel.UNSUBSCRIBED;\n    channel.emit('subscribeFail', err, channelName, subscriptionOptions);\n    Emitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);\n  }\n}; // Cancel any pending subscribe callback\n\n\nSCClientSocket.prototype._cancelPendingSubscribeCallback = function (channel) {\n  if (channel._pendingSubscriptionCid != null) {\n    this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);\n    delete channel._pendingSubscriptionCid;\n  }\n};\n\nSCClientSocket.prototype._decorateChannelName = function (channelName) {\n  if (this.channelPrefix) {\n    channelName = this.channelPrefix + channelName;\n  }\n\n  return channelName;\n};\n\nSCClientSocket.prototype._undecorateChannelName = function (decoratedChannelName) {\n  if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) == 0) {\n    return decoratedChannelName.replace(this.channelPrefix, '');\n  }\n\n  return decoratedChannelName;\n};\n\nSCClientSocket.prototype._trySubscribe = function (channel) {\n  var self = this;\n  var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED; // We can only ever have one pending subscribe action at any given time on a channel\n\n  if (this.state == this.OPEN && !this.preparingPendingSubscriptions && channel._pendingSubscriptionCid == null && meetsAuthRequirements) {\n    var options = {\n      noTimeout: true\n    };\n    var subscriptionOptions = {\n      channel: this._decorateChannelName(channel.name)\n    };\n\n    if (channel.waitForAuth) {\n      options.waitForAuth = true;\n      subscriptionOptions.waitForAuth = options.waitForAuth;\n    }\n\n    if (channel.data) {\n      subscriptionOptions.data = channel.data;\n    }\n\n    if (channel.batch) {\n      options.batch = true;\n      subscriptionOptions.batch = true;\n    }\n\n    channel._pendingSubscriptionCid = this.transport.emit('#subscribe', subscriptionOptions, options, function (err) {\n      delete channel._pendingSubscriptionCid;\n\n      if (err) {\n        self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);\n      } else {\n        self._triggerChannelSubscribe(channel, subscriptionOptions);\n      }\n    });\n    Emitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);\n  }\n};\n\nSCClientSocket.prototype.subscribe = function (channelName, options) {\n  var channel = this.channels[channelName];\n\n  if (!channel) {\n    channel = new SCChannel(channelName, this, options);\n    this.channels[channelName] = channel;\n  } else if (options) {\n    channel.setOptions(options);\n  }\n\n  if (channel.state == channel.UNSUBSCRIBED) {\n    channel.state = channel.PENDING;\n\n    this._trySubscribe(channel);\n  }\n\n  return channel;\n};\n\nSCClientSocket.prototype._triggerChannelUnsubscribe = function (channel, newState) {\n  var channelName = channel.name;\n  var oldState = channel.state;\n\n  if (newState) {\n    channel.state = newState;\n  } else {\n    channel.state = channel.UNSUBSCRIBED;\n  }\n\n  this._cancelPendingSubscribeCallback(channel);\n\n  if (oldState == channel.SUBSCRIBED) {\n    var stateChangeData = {\n      channel: channelName,\n      oldState: oldState,\n      newState: channel.state\n    };\n    channel.emit('subscribeStateChange', stateChangeData);\n    channel.emit('unsubscribe', channelName);\n    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);\n    Emitter.prototype.emit.call(this, 'unsubscribe', channelName);\n  }\n};\n\nSCClientSocket.prototype._tryUnsubscribe = function (channel) {\n  var self = this;\n\n  if (this.state == this.OPEN) {\n    var options = {\n      noTimeout: true\n    };\n\n    if (channel.batch) {\n      options.batch = true;\n    } // If there is a pending subscribe action, cancel the callback\n\n\n    this._cancelPendingSubscribeCallback(channel); // This operation cannot fail because the TCP protocol guarantees delivery\n    // so long as the connection remains open. If the connection closes,\n    // the server will automatically unsubscribe the client and thus complete\n    // the operation on the server side.\n\n\n    var decoratedChannelName = this._decorateChannelName(channel.name);\n\n    this.transport.emit('#unsubscribe', decoratedChannelName, options);\n  }\n};\n\nSCClientSocket.prototype.unsubscribe = function (channelName) {\n  var channel = this.channels[channelName];\n\n  if (channel) {\n    if (channel.state != channel.UNSUBSCRIBED) {\n      this._triggerChannelUnsubscribe(channel);\n\n      this._tryUnsubscribe(channel);\n    }\n  }\n};\n\nSCClientSocket.prototype.channel = function (channelName, options) {\n  var currentChannel = this.channels[channelName];\n\n  if (!currentChannel) {\n    currentChannel = new SCChannel(channelName, this, options);\n    this.channels[channelName] = currentChannel;\n  }\n\n  return currentChannel;\n};\n\nSCClientSocket.prototype.destroyChannel = function (channelName) {\n  var channel = this.channels[channelName];\n\n  if (channel) {\n    channel.unwatch();\n    channel.unsubscribe();\n    delete this.channels[channelName];\n  }\n};\n\nSCClientSocket.prototype.subscriptions = function (includePending) {\n  var subs = [];\n  var channel, includeChannel;\n\n  for (var channelName in this.channels) {\n    if (this.channels.hasOwnProperty(channelName)) {\n      channel = this.channels[channelName];\n\n      if (includePending) {\n        includeChannel = channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);\n      } else {\n        includeChannel = channel && channel.state == channel.SUBSCRIBED;\n      }\n\n      if (includeChannel) {\n        subs.push(channelName);\n      }\n    }\n  }\n\n  return subs;\n};\n\nSCClientSocket.prototype.isSubscribed = function (channelName, includePending) {\n  var channel = this.channels[channelName];\n\n  if (includePending) {\n    return !!channel && (channel.state == channel.SUBSCRIBED || channel.state == channel.PENDING);\n  }\n\n  return !!channel && channel.state == channel.SUBSCRIBED;\n};\n\nSCClientSocket.prototype.processPendingSubscriptions = function () {\n  var self = this;\n  this.preparingPendingSubscriptions = false;\n  var pendingChannels = [];\n\n  for (var i in this.channels) {\n    if (this.channels.hasOwnProperty(i)) {\n      var channel = this.channels[i];\n\n      if (channel.state == channel.PENDING) {\n        pendingChannels.push(channel);\n      }\n    }\n  }\n\n  pendingChannels.sort(function (a, b) {\n    var ap = a.priority || 0;\n    var bp = b.priority || 0;\n\n    if (ap > bp) {\n      return -1;\n    }\n\n    if (ap < bp) {\n      return 1;\n    }\n\n    return 0;\n  });\n  pendingChannels.forEach(function (channel) {\n    self._trySubscribe(channel);\n  });\n};\n\nSCClientSocket.prototype.watch = function (channelName, handler) {\n  if (typeof handler != 'function') {\n    throw new InvalidArgumentsError('No handler function was provided');\n  }\n\n  this._channelEmitter.on(channelName, handler);\n};\n\nSCClientSocket.prototype.unwatch = function (channelName, handler) {\n  if (handler) {\n    this._channelEmitter.removeListener(channelName, handler);\n  } else {\n    this._channelEmitter.removeAllListeners(channelName);\n  }\n};\n\nSCClientSocket.prototype.watchers = function (channelName) {\n  return this._channelEmitter.listeners(channelName);\n};\n\nmodule.exports = SCClientSocket;","map":{"version":3,"sources":["/Users/anishniroula/Documents/todo/node_modules/socketcluster-client/lib/scclientsocket.js"],"names":["Emitter","require","SCChannel","Response","AuthEngine","formatter","SCTransport","querystring","LinkedList","base64","clone","scErrors","InvalidArgumentsError","InvalidMessageError","InvalidActionError","SocketProtocolError","TimeoutError","BadConnectionError","isBrowser","window","SCClientSocket","opts","self","call","id","state","CLOSED","authState","UNAUTHENTICATED","signedAuthToken","authToken","pendingReconnect","pendingReconnectTimeout","preparingPendingSubscriptions","clientId","connectTimeout","ackTimeout","channelPrefix","disconnectOnUnload","authTokenName","pingTimeout","pingTimeoutDisabled","active","_clientMap","clientMap","maxTimeout","Math","pow","verifyDuration","propertyName","_localEvents","connectAttempts","_emitBuffer","channels","options","_cid","callIdGenerator","autoReconnect","autoReconnectOptions","reconnectOptions","initialDelay","randomness","multiplier","maxDelay","subscriptionRetryOptions","authEngine","auth","codecEngine","codec","path","replace","query","parse","_channelEmitter","_unloadHandler","disconnect","global","addEventListener","autoConnect","connect","prototype","Object","create","CONNECTING","OPEN","AUTHENTICATED","PENDING","ignoreStatuses","socketProtocolIgnoreStatuses","errorStatuses","socketProtocolErrorStatuses","_privateEventHandlerMap","data","undecoratedChannelName","_undecorateChannelName","channel","isSubscribed","emit","message","_triggerChannelUnsubscribe","response","triggerAuthenticate","err","error","_onSCError","_changeToAuthenticatedState","token","end","saveToken","removeToken","oldToken","_changeToUnauthenticatedStateAndClearTokens","transport","close","code","getState","getBytesReceived","deauthenticate","callback","open","clearTimeout","_reconnectTimeoutRef","off","on","status","_onSCOpen","_onSCClose","event","res","_onSCEvent","reconnect","destroy","removeEventListener","oldState","oldSignedToken","stateChangeData","newState","_extractAuthTokenData","processPendingSubscriptions","decodeBase64","encodedString","decodedString","Buffer","atob","decode","buffer","toString","encodeBase64","btoa","encode","tokenParts","split","encodedTokenData","tokenData","JSON","e","getAuthToken","getSignedAuthToken","authenticate","authStatus","isAuthenticated","authError","hydrateError","name","_tryReconnect","exponent","timeout","initialTimeout","round","random","setTimeout","autoSubscribeOnConnect","_flushEmitBuffer","listeners","length","_suspendSubscriptions","channelName","hasOwnProperty","SUBSCRIBED","UNSUBSCRIBED","_abortAllPendingEventsDueToBadConnection","failureType","currentNode","head","nextNode","next","eventObject","detach","errorMessage","cid","cancelPendingResponse","openAbort","closeMessage","handler","apply","arguments","object","emitObject","_handleEventAckTimeout","eventNode","_emit","Item","cloneData","append","send","publish","pubData","_decorateChannelName","_triggerChannelSubscribe","subscriptionOptions","_triggerChannelSubscribeFail","meetsAuthRequirements","waitForAuth","_cancelPendingSubscribeCallback","_pendingSubscriptionCid","decoratedChannelName","indexOf","_trySubscribe","noTimeout","batch","subscribe","setOptions","_tryUnsubscribe","unsubscribe","currentChannel","destroyChannel","unwatch","subscriptions","includePending","subs","includeChannel","push","pendingChannels","i","sort","a","b","ap","priority","bp","forEach","watch","removeListener","removeAllListeners","watchers","module","exports"],"mappings":"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","sourcesContent":["var Emitter = require('component-emitter');\r\nvar SCChannel = require('sc-channel').SCChannel;\r\nvar Response = require('./response').Response;\r\nvar AuthEngine = require('./auth').AuthEngine;\r\nvar formatter = require('sc-formatter');\r\nvar SCTransport = require('./sctransport').SCTransport;\r\nvar querystring = require('querystring');\r\nvar LinkedList = require('linked-list');\r\nvar base64 = require('base-64');\r\nvar clone = require('clone');\r\n\r\nvar scErrors = require('sc-errors');\r\nvar InvalidArgumentsError = scErrors.InvalidArgumentsError;\r\nvar InvalidMessageError = scErrors.InvalidMessageError;\r\nvar InvalidActionError = scErrors.InvalidActionError;\r\nvar SocketProtocolError = scErrors.SocketProtocolError;\r\nvar TimeoutError = scErrors.TimeoutError;\r\nvar BadConnectionError = scErrors.BadConnectionError;\r\n\r\nvar isBrowser = typeof window != 'undefined';\r\n\r\n\r\nvar SCClientSocket = function (opts) {\r\n  var self = this;\r\n\r\n  Emitter.call(this);\r\n\r\n  this.id = null;\r\n  this.state = this.CLOSED;\r\n  this.authState = this.UNAUTHENTICATED;\r\n  this.signedAuthToken = null;\r\n  this.authToken = null;\r\n  this.pendingReconnect = false;\r\n  this.pendingReconnectTimeout = null;\r\n  this.preparingPendingSubscriptions = false;\r\n  this.clientId = opts.clientId;\r\n\r\n  this.connectTimeout = opts.connectTimeout;\r\n  this.ackTimeout = opts.ackTimeout;\r\n  this.channelPrefix = opts.channelPrefix || null;\r\n  this.disconnectOnUnload = opts.disconnectOnUnload == null ? true : opts.disconnectOnUnload;\r\n  this.authTokenName = opts.authTokenName;\r\n\r\n  // pingTimeout will be ackTimeout at the start, but it will\r\n  // be updated with values provided by the 'connect' event\r\n  this.pingTimeout = this.ackTimeout;\r\n  this.pingTimeoutDisabled = !!opts.pingTimeoutDisabled;\r\n  this.active = true;\r\n\r\n  this._clientMap = opts.clientMap || {};\r\n\r\n  var maxTimeout = Math.pow(2, 31) - 1;\r\n\r\n  var verifyDuration = function (propertyName) {\r\n    if (self[propertyName] > maxTimeout) {\r\n      throw new InvalidArgumentsError('The ' + propertyName +\r\n        ' value provided exceeded the maximum amount allowed');\r\n    }\r\n  };\r\n\r\n  verifyDuration('connectTimeout');\r\n  verifyDuration('ackTimeout');\r\n\r\n  this._localEvents = {\r\n    'connect': 1,\r\n    'connectAbort': 1,\r\n    'close': 1,\r\n    'disconnect': 1,\r\n    'message': 1,\r\n    'error': 1,\r\n    'raw': 1,\r\n    'kickOut': 1,\r\n    'subscribe': 1,\r\n    'unsubscribe': 1,\r\n    'subscribeStateChange': 1,\r\n    'authStateChange': 1,\r\n    'authenticate': 1,\r\n    'deauthenticate': 1,\r\n    'removeAuthToken': 1,\r\n    'subscribeRequest': 1\r\n  };\r\n\r\n  this.connectAttempts = 0;\r\n\r\n  this._emitBuffer = new LinkedList();\r\n  this.channels = {};\r\n\r\n  this.options = opts;\r\n\r\n  this._cid = 1;\r\n\r\n  this.options.callIdGenerator = function () {\r\n    return self._cid++;\r\n  };\r\n\r\n  if (this.options.autoReconnect) {\r\n    if (this.options.autoReconnectOptions == null) {\r\n      this.options.autoReconnectOptions = {};\r\n    }\r\n\r\n    // Add properties to the this.options.autoReconnectOptions object.\r\n    // We assign the reference to a reconnectOptions variable to avoid repetition.\r\n    var reconnectOptions = this.options.autoReconnectOptions;\r\n    if (reconnectOptions.initialDelay == null) {\r\n      reconnectOptions.initialDelay = 10000;\r\n    }\r\n    if (reconnectOptions.randomness == null) {\r\n      reconnectOptions.randomness = 10000;\r\n    }\r\n    if (reconnectOptions.multiplier == null) {\r\n      reconnectOptions.multiplier = 1.5;\r\n    }\r\n    if (reconnectOptions.maxDelay == null) {\r\n      reconnectOptions.maxDelay = 60000;\r\n    }\r\n  }\r\n\r\n  if (this.options.subscriptionRetryOptions == null) {\r\n    this.options.subscriptionRetryOptions = {};\r\n  }\r\n\r\n  if (this.options.authEngine) {\r\n    this.auth = this.options.authEngine;\r\n  } else {\r\n    this.auth = new AuthEngine();\r\n  }\r\n\r\n  if (this.options.codecEngine) {\r\n    this.codec = this.options.codecEngine;\r\n  } else {\r\n    // Default codec engine\r\n    this.codec = formatter;\r\n  }\r\n\r\n  this.options.path = this.options.path.replace(/\\/$/, '') + '/';\r\n\r\n  this.options.query = opts.query || {};\r\n  if (typeof this.options.query == 'string') {\r\n    this.options.query = querystring.parse(this.options.query);\r\n  }\r\n\r\n  this._channelEmitter = new Emitter();\r\n\r\n  this._unloadHandler = function () {\r\n    self.disconnect();\r\n  };\r\n\r\n  if (isBrowser && this.disconnectOnUnload && global.addEventListener) {\r\n    global.addEventListener('beforeunload', this._unloadHandler, false);\r\n  }\r\n  this._clientMap[this.clientId] = this;\r\n\r\n  if (this.options.autoConnect) {\r\n    this.connect();\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype = Object.create(Emitter.prototype);\r\n\r\nSCClientSocket.CONNECTING = SCClientSocket.prototype.CONNECTING = SCTransport.prototype.CONNECTING;\r\nSCClientSocket.OPEN = SCClientSocket.prototype.OPEN = SCTransport.prototype.OPEN;\r\nSCClientSocket.CLOSED = SCClientSocket.prototype.CLOSED = SCTransport.prototype.CLOSED;\r\n\r\nSCClientSocket.AUTHENTICATED = SCClientSocket.prototype.AUTHENTICATED = 'authenticated';\r\nSCClientSocket.UNAUTHENTICATED = SCClientSocket.prototype.UNAUTHENTICATED = 'unauthenticated';\r\n\r\nSCClientSocket.PENDING = SCClientSocket.prototype.PENDING = 'pending';\r\n\r\nSCClientSocket.ignoreStatuses = scErrors.socketProtocolIgnoreStatuses;\r\nSCClientSocket.errorStatuses = scErrors.socketProtocolErrorStatuses;\r\n\r\nSCClientSocket.prototype._privateEventHandlerMap = {\r\n  '#publish': function (data) {\r\n    var undecoratedChannelName = this._undecorateChannelName(data.channel);\r\n    var isSubscribed = this.isSubscribed(undecoratedChannelName, true);\r\n\r\n    if (isSubscribed) {\r\n      this._channelEmitter.emit(undecoratedChannelName, data.data);\r\n    }\r\n  },\r\n  '#kickOut': function (data) {\r\n    var undecoratedChannelName = this._undecorateChannelName(data.channel);\r\n    var channel = this.channels[undecoratedChannelName];\r\n    if (channel) {\r\n      Emitter.prototype.emit.call(this, 'kickOut', data.message, undecoratedChannelName);\r\n      channel.emit('kickOut', data.message, undecoratedChannelName);\r\n      this._triggerChannelUnsubscribe(channel);\r\n    }\r\n  },\r\n  '#setAuthToken': function (data, response) {\r\n    var self = this;\r\n\r\n    if (data) {\r\n      var triggerAuthenticate = function (err) {\r\n        if (err) {\r\n          // This is a non-fatal error, we don't want to close the connection\r\n          // because of this but we do want to notify the server and throw an error\r\n          // on the client.\r\n          response.error(err);\r\n          self._onSCError(err);\r\n        } else {\r\n          self._changeToAuthenticatedState(data.token);\r\n          response.end();\r\n        }\r\n      };\r\n\r\n      this.auth.saveToken(this.authTokenName, data.token, {}, triggerAuthenticate);\r\n    } else {\r\n      response.error(new InvalidMessageError('No token data provided by #setAuthToken event'));\r\n    }\r\n  },\r\n  '#removeAuthToken': function (data, response) {\r\n    var self = this;\r\n\r\n    this.auth.removeToken(this.authTokenName, function (err, oldToken) {\r\n      if (err) {\r\n        // Non-fatal error - Do not close the connection\r\n        response.error(err);\r\n        self._onSCError(err);\r\n      } else {\r\n        Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);\r\n        self._changeToUnauthenticatedStateAndClearTokens();\r\n        response.end();\r\n      }\r\n    });\r\n  },\r\n  '#disconnect': function (data) {\r\n    this.transport.close(data.code, data.data);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.getState = function () {\r\n  return this.state;\r\n};\r\n\r\nSCClientSocket.prototype.getBytesReceived = function () {\r\n  return this.transport.getBytesReceived();\r\n};\r\n\r\nSCClientSocket.prototype.deauthenticate = function (callback) {\r\n  var self = this;\r\n\r\n  this.auth.removeToken(this.authTokenName, function (err, oldToken) {\r\n    if (err) {\r\n      // Non-fatal error - Do not close the connection\r\n      self._onSCError(err);\r\n    } else {\r\n      Emitter.prototype.emit.call(self, 'removeAuthToken', oldToken);\r\n      if (self.state != self.CLOSED) {\r\n        self.emit('#removeAuthToken');\r\n      }\r\n      self._changeToUnauthenticatedStateAndClearTokens();\r\n    }\r\n    callback && callback(err);\r\n  });\r\n};\r\n\r\nSCClientSocket.prototype.connect = SCClientSocket.prototype.open = function () {\r\n  var self = this;\r\n\r\n  if (!this.active) {\r\n    var error = new InvalidActionError('Cannot connect a destroyed client');\r\n    this._onSCError(error);\r\n    return;\r\n  }\r\n\r\n  if (this.state == this.CLOSED) {\r\n    this.pendingReconnect = false;\r\n    this.pendingReconnectTimeout = null;\r\n    clearTimeout(this._reconnectTimeoutRef);\r\n\r\n    this.state = this.CONNECTING;\r\n    Emitter.prototype.emit.call(this, 'connecting');\r\n\r\n    if (this.transport) {\r\n      this.transport.off();\r\n    }\r\n\r\n    this.transport = new SCTransport(this.auth, this.codec, this.options);\r\n\r\n    this.transport.on('open', function (status) {\r\n      self.state = self.OPEN;\r\n      self._onSCOpen(status);\r\n    });\r\n\r\n    this.transport.on('error', function (err) {\r\n      self._onSCError(err);\r\n    });\r\n\r\n    this.transport.on('close', function (code, data) {\r\n      self.state = self.CLOSED;\r\n      self._onSCClose(code, data);\r\n    });\r\n\r\n    this.transport.on('openAbort', function (code, data) {\r\n      self.state = self.CLOSED;\r\n      self._onSCClose(code, data, true);\r\n    });\r\n\r\n    this.transport.on('event', function (event, data, res) {\r\n      self._onSCEvent(event, data, res);\r\n    });\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.reconnect = function (code, data) {\r\n  this.disconnect(code, data);\r\n  this.connect();\r\n};\r\n\r\nSCClientSocket.prototype.disconnect = function (code, data) {\r\n  code = code || 1000;\r\n\r\n  if (typeof code != 'number') {\r\n    throw new InvalidArgumentsError('If specified, the code argument must be a number');\r\n  }\r\n\r\n  if (this.state == this.OPEN || this.state == this.CONNECTING) {\r\n    this.transport.close(code, data);\r\n  } else {\r\n    this.pendingReconnect = false;\r\n    this.pendingReconnectTimeout = null;\r\n    clearTimeout(this._reconnectTimeoutRef);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.destroy = function (code, data) {\r\n  if (isBrowser && global.removeEventListener) {\r\n    global.removeEventListener('beforeunload', this._unloadHandler, false);\r\n  }\r\n  this.active = false;\r\n  this.disconnect(code, data);\r\n  delete this._clientMap[this.clientId];\r\n};\r\n\r\nSCClientSocket.prototype._changeToUnauthenticatedStateAndClearTokens = function () {\r\n  if (this.authState != this.UNAUTHENTICATED) {\r\n    var oldState = this.authState;\r\n    var oldSignedToken = this.signedAuthToken;\r\n    this.authState = this.UNAUTHENTICATED;\r\n    this.signedAuthToken = null;\r\n    this.authToken = null;\r\n\r\n    var stateChangeData = {\r\n      oldState: oldState,\r\n      newState: this.authState\r\n    };\r\n    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);\r\n    Emitter.prototype.emit.call(this, 'deauthenticate', oldSignedToken);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._changeToAuthenticatedState = function (signedAuthToken) {\r\n  this.signedAuthToken = signedAuthToken;\r\n  this.authToken = this._extractAuthTokenData(signedAuthToken);\r\n\r\n  if (this.authState != this.AUTHENTICATED) {\r\n    var oldState = this.authState;\r\n    this.authState = this.AUTHENTICATED;\r\n    var stateChangeData = {\r\n      oldState: oldState,\r\n      newState: this.authState,\r\n      signedAuthToken: signedAuthToken,\r\n      authToken: this.authToken\r\n    };\r\n    if (!this.preparingPendingSubscriptions) {\r\n      this.processPendingSubscriptions();\r\n    }\r\n\r\n    Emitter.prototype.emit.call(this, 'authStateChange', stateChangeData);\r\n  }\r\n  Emitter.prototype.emit.call(this, 'authenticate', signedAuthToken);\r\n};\r\n\r\nSCClientSocket.prototype.decodeBase64 = function (encodedString) {\r\n  var decodedString;\r\n  if (typeof Buffer == 'undefined') {\r\n    if (global.atob) {\r\n      decodedString = global.atob(encodedString);\r\n    } else {\r\n      decodedString = base64.decode(encodedString);\r\n    }\r\n  } else {\r\n    var buffer = new Buffer(encodedString, 'base64');\r\n    decodedString = buffer.toString('utf8');\r\n  }\r\n  return decodedString;\r\n};\r\n\r\nSCClientSocket.prototype.encodeBase64 = function (decodedString) {\r\n  var encodedString;\r\n  if (typeof Buffer == 'undefined') {\r\n    if (global.btoa) {\r\n      encodedString = global.btoa(decodedString);\r\n    } else {\r\n      encodedString = base64.encode(decodedString);\r\n    }\r\n  } else {\r\n    var buffer = new Buffer(decodedString, 'utf8');\r\n    encodedString = buffer.toString('base64');\r\n  }\r\n  return encodedString;\r\n};\r\n\r\nSCClientSocket.prototype._extractAuthTokenData = function (signedAuthToken) {\r\n  var tokenParts = (signedAuthToken || '').split('.');\r\n  var encodedTokenData = tokenParts[1];\r\n  if (encodedTokenData != null) {\r\n    var tokenData = encodedTokenData;\r\n    try {\r\n      tokenData = this.decodeBase64(tokenData);\r\n      return JSON.parse(tokenData);\r\n    } catch (e) {\r\n      return tokenData;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nSCClientSocket.prototype.getAuthToken = function () {\r\n  return this.authToken;\r\n};\r\n\r\nSCClientSocket.prototype.getSignedAuthToken = function () {\r\n  return this.signedAuthToken;\r\n};\r\n\r\n// Perform client-initiated authentication by providing an encrypted token string.\r\nSCClientSocket.prototype.authenticate = function (signedAuthToken, callback) {\r\n  var self = this;\r\n\r\n  this.emit('#authenticate', signedAuthToken, function (err, authStatus) {\r\n    if (authStatus && authStatus.isAuthenticated != null) {\r\n      // If authStatus is correctly formatted (has an isAuthenticated property),\r\n      // then we will rehydrate the authError.\r\n      if (authStatus.authError) {\r\n        authStatus.authError = scErrors.hydrateError(authStatus.authError);\r\n      }\r\n    } else {\r\n      // Some errors like BadConnectionError and TimeoutError will not pass a valid\r\n      // authStatus object to the current function, so we need to create it ourselves.\r\n      authStatus = {\r\n        isAuthenticated: self.authState,\r\n        authError: null\r\n      };\r\n    }\r\n    if (err) {\r\n      if (err.name != 'BadConnectionError' && err.name != 'TimeoutError') {\r\n        // In case of a bad/closed connection or a timeout, we maintain the last\r\n        // known auth state since those errors don't mean that the token is invalid.\r\n\r\n        self._changeToUnauthenticatedStateAndClearTokens();\r\n      }\r\n      callback && callback(err, authStatus);\r\n    } else {\r\n      self.auth.saveToken(self.authTokenName, signedAuthToken, {}, function (err) {\r\n        if (err) {\r\n          self._onSCError(err);\r\n        }\r\n        if (authStatus.isAuthenticated) {\r\n          self._changeToAuthenticatedState(signedAuthToken);\r\n        } else {\r\n          self._changeToUnauthenticatedStateAndClearTokens();\r\n        }\r\n        callback && callback(err, authStatus);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nSCClientSocket.prototype._tryReconnect = function (initialDelay) {\r\n  var self = this;\r\n\r\n  var exponent = this.connectAttempts++;\r\n  var reconnectOptions = this.options.autoReconnectOptions;\r\n  var timeout;\r\n\r\n  if (initialDelay == null || exponent > 0) {\r\n    var initialTimeout = Math.round(reconnectOptions.initialDelay + (reconnectOptions.randomness || 0) * Math.random());\r\n\r\n    timeout = Math.round(initialTimeout * Math.pow(reconnectOptions.multiplier, exponent));\r\n  } else {\r\n    timeout = initialDelay;\r\n  }\r\n\r\n  if (timeout > reconnectOptions.maxDelay) {\r\n    timeout = reconnectOptions.maxDelay;\r\n  }\r\n\r\n  clearTimeout(this._reconnectTimeoutRef);\r\n\r\n  this.pendingReconnect = true;\r\n  this.pendingReconnectTimeout = timeout;\r\n  this._reconnectTimeoutRef = setTimeout(function () {\r\n    self.connect();\r\n  }, timeout);\r\n};\r\n\r\nSCClientSocket.prototype._onSCOpen = function (status) {\r\n  var self = this;\r\n\r\n  this.preparingPendingSubscriptions = true;\r\n\r\n  if (status) {\r\n    this.id = status.id;\r\n    this.pingTimeout = status.pingTimeout;\r\n    this.transport.pingTimeout = this.pingTimeout;\r\n    if (status.isAuthenticated) {\r\n      this._changeToAuthenticatedState(status.authToken);\r\n    } else {\r\n      this._changeToUnauthenticatedStateAndClearTokens();\r\n    }\r\n  } else {\r\n    // This can happen if auth.loadToken (in sctransport.js) fails with\r\n    // an error - This means that the signedAuthToken cannot be loaded by\r\n    // the auth engine and therefore, we need to unauthenticate the client.\r\n    this._changeToUnauthenticatedStateAndClearTokens();\r\n  }\r\n\r\n  this.connectAttempts = 0;\r\n\r\n  if (this.options.autoSubscribeOnConnect) {\r\n    this.processPendingSubscriptions();\r\n  }\r\n\r\n  // If the user invokes the callback while in autoSubscribeOnConnect mode, it\r\n  // won't break anything.\r\n  Emitter.prototype.emit.call(this, 'connect', status, function () {\r\n    self.processPendingSubscriptions();\r\n  });\r\n\r\n  if (this.state == this.OPEN) {\r\n    this._flushEmitBuffer();\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._onSCError = function (err) {\r\n  var self = this;\r\n\r\n  // Throw error in different stack frame so that error handling\r\n  // cannot interfere with a reconnect action.\r\n  setTimeout(function () {\r\n    if (self.listeners('error').length < 1) {\r\n      throw err;\r\n    } else {\r\n      Emitter.prototype.emit.call(self, 'error', err);\r\n    }\r\n  }, 0);\r\n};\r\n\r\nSCClientSocket.prototype._suspendSubscriptions = function () {\r\n  var channel, newState;\r\n  for (var channelName in this.channels) {\r\n    if (this.channels.hasOwnProperty(channelName)) {\r\n      channel = this.channels[channelName];\r\n      if (channel.state == channel.SUBSCRIBED ||\r\n        channel.state == channel.PENDING) {\r\n\r\n        newState = channel.PENDING;\r\n      } else {\r\n        newState = channel.UNSUBSCRIBED;\r\n      }\r\n\r\n      this._triggerChannelUnsubscribe(channel, newState);\r\n    }\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._abortAllPendingEventsDueToBadConnection = function (failureType) {\r\n  var currentNode = this._emitBuffer.head;\r\n  var nextNode;\r\n\r\n  while (currentNode) {\r\n    nextNode = currentNode.next;\r\n    var eventObject = currentNode.data;\r\n    clearTimeout(eventObject.timeout);\r\n    delete eventObject.timeout;\r\n    currentNode.detach();\r\n    currentNode = nextNode;\r\n\r\n    var callback = eventObject.callback;\r\n    if (callback) {\r\n      delete eventObject.callback;\r\n      var errorMessage = \"Event '\" + eventObject.event +\r\n        \"' was aborted due to a bad connection\";\r\n      var error = new BadConnectionError(errorMessage, failureType);\r\n      callback.call(eventObject, error, eventObject);\r\n    }\r\n    // Cleanup any pending response callback in the transport layer too.\r\n    if (eventObject.cid) {\r\n      this.transport.cancelPendingResponse(eventObject.cid);\r\n    }\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._onSCClose = function (code, data, openAbort) {\r\n  var self = this;\r\n\r\n  this.id = null;\r\n\r\n  if (this.transport) {\r\n    this.transport.off();\r\n  }\r\n  this.pendingReconnect = false;\r\n  this.pendingReconnectTimeout = null;\r\n  clearTimeout(this._reconnectTimeoutRef);\r\n\r\n  this._suspendSubscriptions();\r\n  this._abortAllPendingEventsDueToBadConnection(openAbort ? 'connectAbort' : 'disconnect');\r\n\r\n  // Try to reconnect\r\n  // on server ping timeout (4000)\r\n  // or on client pong timeout (4001)\r\n  // or on close without status (1005)\r\n  // or on handshake failure (4003)\r\n  // or on handshake rejection (4008)\r\n  // or on socket hung up (1006)\r\n  if (this.options.autoReconnect) {\r\n    if (code == 4000 || code == 4001 || code == 1005) {\r\n      // If there is a ping or pong timeout or socket closes without\r\n      // status, don't wait before trying to reconnect - These could happen\r\n      // if the client wakes up after a period of inactivity and in this case we\r\n      // want to re-establish the connection as soon as possible.\r\n      this._tryReconnect(0);\r\n\r\n      // Codes 4500 and above will be treated as permanent disconnects.\r\n      // Socket will not try to auto-reconnect.\r\n    } else if (code != 1000 && code < 4500) {\r\n      this._tryReconnect();\r\n    }\r\n  }\r\n\r\n  if (openAbort) {\r\n    Emitter.prototype.emit.call(self, 'connectAbort', code, data);\r\n  } else {\r\n    Emitter.prototype.emit.call(self, 'disconnect', code, data);\r\n  }\r\n  Emitter.prototype.emit.call(self, 'close', code, data);\r\n\r\n  if (!SCClientSocket.ignoreStatuses[code]) {\r\n    var closeMessage;\r\n    if (data) {\r\n      closeMessage = 'Socket connection closed with status code ' + code + ' and reason: ' + data;\r\n    } else {\r\n      closeMessage = 'Socket connection closed with status code ' + code;\r\n    }\r\n    var err = new SocketProtocolError(SCClientSocket.errorStatuses[code] || closeMessage, code);\r\n    this._onSCError(err);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._onSCEvent = function (event, data, res) {\r\n  var handler = this._privateEventHandlerMap[event];\r\n  if (handler) {\r\n    handler.call(this, data, res);\r\n  } else {\r\n    Emitter.prototype.emit.call(this, event, data, function () {\r\n      res && res.callback.apply(res, arguments);\r\n    });\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.decode = function (message) {\r\n  return this.transport.decode(message);\r\n};\r\n\r\nSCClientSocket.prototype.encode = function (object) {\r\n  return this.transport.encode(object);\r\n};\r\n\r\nSCClientSocket.prototype._flushEmitBuffer = function () {\r\n  var currentNode = this._emitBuffer.head;\r\n  var nextNode;\r\n\r\n  while (currentNode) {\r\n    nextNode = currentNode.next;\r\n    var eventObject = currentNode.data;\r\n    currentNode.detach();\r\n    this.transport.emitObject(eventObject);\r\n    currentNode = nextNode;\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._handleEventAckTimeout = function (eventObject, eventNode) {\r\n  if (eventNode) {\r\n    eventNode.detach();\r\n  }\r\n  delete eventObject.timeout;\r\n\r\n  var callback = eventObject.callback;\r\n  if (callback) {\r\n    delete eventObject.callback;\r\n    var error = new TimeoutError(\"Event response for '\" + eventObject.event + \"' timed out\");\r\n    callback.call(eventObject, error, eventObject);\r\n  }\r\n  // Cleanup any pending response callback in the transport layer too.\r\n  if (eventObject.cid) {\r\n    this.transport.cancelPendingResponse(eventObject.cid);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._emit = function (event, data, callback) {\r\n  var self = this;\r\n\r\n  if (this.state == this.CLOSED) {\r\n    this.connect();\r\n  }\r\n  var eventObject = {\r\n    event: event,\r\n    callback: callback\r\n  };\r\n\r\n  var eventNode = new LinkedList.Item();\r\n\r\n  if (this.options.cloneData) {\r\n    eventObject.data = clone(data);\r\n  } else {\r\n    eventObject.data = data;\r\n  }\r\n  eventNode.data = eventObject;\r\n\r\n  eventObject.timeout = setTimeout(function () {\r\n    self._handleEventAckTimeout(eventObject, eventNode);\r\n  }, this.ackTimeout);\r\n\r\n  this._emitBuffer.append(eventNode);\r\n  if (this.state == this.OPEN) {\r\n    this._flushEmitBuffer();\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.send = function (data) {\r\n  this.transport.send(data);\r\n};\r\n\r\nSCClientSocket.prototype.emit = function (event, data, callback) {\r\n  if (this._localEvents[event] == null) {\r\n    this._emit(event, data, callback);\r\n  } else if (event == 'error') {\r\n    Emitter.prototype.emit.call(this, event, data);\r\n  } else {\r\n    var error = new InvalidActionError('The \"' + event + '\" event is reserved and cannot be emitted on a client socket');\r\n    this._onSCError(error);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.publish = function (channelName, data, callback) {\r\n  var pubData = {\r\n    channel: this._decorateChannelName(channelName),\r\n    data: data\r\n  };\r\n  this.emit('#publish', pubData, callback);\r\n};\r\n\r\nSCClientSocket.prototype._triggerChannelSubscribe = function (channel, subscriptionOptions) {\r\n  var channelName = channel.name;\r\n\r\n  if (channel.state != channel.SUBSCRIBED) {\r\n    var oldState = channel.state;\r\n    channel.state = channel.SUBSCRIBED;\r\n\r\n    var stateChangeData = {\r\n      channel: channelName,\r\n      oldState: oldState,\r\n      newState: channel.state,\r\n      subscriptionOptions: subscriptionOptions\r\n    };\r\n    channel.emit('subscribeStateChange', stateChangeData);\r\n    channel.emit('subscribe', channelName, subscriptionOptions);\r\n    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);\r\n    Emitter.prototype.emit.call(this, 'subscribe', channelName, subscriptionOptions);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._triggerChannelSubscribeFail = function (err, channel, subscriptionOptions) {\r\n  var channelName = channel.name;\r\n  var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;\r\n\r\n  if (channel.state != channel.UNSUBSCRIBED && meetsAuthRequirements) {\r\n    channel.state = channel.UNSUBSCRIBED;\r\n\r\n    channel.emit('subscribeFail', err, channelName, subscriptionOptions);\r\n    Emitter.prototype.emit.call(this, 'subscribeFail', err, channelName, subscriptionOptions);\r\n  }\r\n};\r\n\r\n// Cancel any pending subscribe callback\r\nSCClientSocket.prototype._cancelPendingSubscribeCallback = function (channel) {\r\n  if (channel._pendingSubscriptionCid != null) {\r\n    this.transport.cancelPendingResponse(channel._pendingSubscriptionCid);\r\n    delete channel._pendingSubscriptionCid;\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._decorateChannelName = function (channelName) {\r\n  if (this.channelPrefix) {\r\n    channelName = this.channelPrefix + channelName;\r\n  }\r\n  return channelName;\r\n};\r\n\r\nSCClientSocket.prototype._undecorateChannelName = function (decoratedChannelName) {\r\n  if (this.channelPrefix && decoratedChannelName.indexOf(this.channelPrefix) == 0) {\r\n    return decoratedChannelName.replace(this.channelPrefix, '');\r\n  }\r\n  return decoratedChannelName;\r\n};\r\n\r\nSCClientSocket.prototype._trySubscribe = function (channel) {\r\n  var self = this;\r\n\r\n  var meetsAuthRequirements = !channel.waitForAuth || this.authState == this.AUTHENTICATED;\r\n\r\n  // We can only ever have one pending subscribe action at any given time on a channel\r\n  if (this.state == this.OPEN && !this.preparingPendingSubscriptions &&\r\n    channel._pendingSubscriptionCid == null && meetsAuthRequirements) {\r\n\r\n    var options = {\r\n      noTimeout: true\r\n    };\r\n\r\n    var subscriptionOptions = {\r\n      channel: this._decorateChannelName(channel.name)\r\n    };\r\n    if (channel.waitForAuth) {\r\n      options.waitForAuth = true;\r\n      subscriptionOptions.waitForAuth = options.waitForAuth;\r\n    }\r\n    if (channel.data) {\r\n      subscriptionOptions.data = channel.data;\r\n    }\r\n    if (channel.batch) {\r\n      options.batch = true;\r\n      subscriptionOptions.batch = true;\r\n    }\r\n\r\n    channel._pendingSubscriptionCid = this.transport.emit(\r\n      '#subscribe', subscriptionOptions, options,\r\n      function (err) {\r\n        delete channel._pendingSubscriptionCid;\r\n        if (err) {\r\n          self._triggerChannelSubscribeFail(err, channel, subscriptionOptions);\r\n        } else {\r\n          self._triggerChannelSubscribe(channel, subscriptionOptions);\r\n        }\r\n      }\r\n    );\r\n    Emitter.prototype.emit.call(this, 'subscribeRequest', channel.name, subscriptionOptions);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.subscribe = function (channelName, options) {\r\n  var channel = this.channels[channelName];\r\n\r\n  if (!channel) {\r\n    channel = new SCChannel(channelName, this, options);\r\n    this.channels[channelName] = channel;\r\n  } else if (options) {\r\n    channel.setOptions(options);\r\n  }\r\n\r\n  if (channel.state == channel.UNSUBSCRIBED) {\r\n    channel.state = channel.PENDING;\r\n    this._trySubscribe(channel);\r\n  }\r\n\r\n  return channel;\r\n};\r\n\r\nSCClientSocket.prototype._triggerChannelUnsubscribe = function (channel, newState) {\r\n  var channelName = channel.name;\r\n  var oldState = channel.state;\r\n\r\n  if (newState) {\r\n    channel.state = newState;\r\n  } else {\r\n    channel.state = channel.UNSUBSCRIBED;\r\n  }\r\n  this._cancelPendingSubscribeCallback(channel);\r\n\r\n  if (oldState == channel.SUBSCRIBED) {\r\n    var stateChangeData = {\r\n      channel: channelName,\r\n      oldState: oldState,\r\n      newState: channel.state\r\n    };\r\n    channel.emit('subscribeStateChange', stateChangeData);\r\n    channel.emit('unsubscribe', channelName);\r\n    Emitter.prototype.emit.call(this, 'subscribeStateChange', stateChangeData);\r\n    Emitter.prototype.emit.call(this, 'unsubscribe', channelName);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype._tryUnsubscribe = function (channel) {\r\n  var self = this;\r\n\r\n  if (this.state == this.OPEN) {\r\n    var options = {\r\n      noTimeout: true\r\n    };\r\n    if (channel.batch) {\r\n      options.batch = true;\r\n    }\r\n    // If there is a pending subscribe action, cancel the callback\r\n    this._cancelPendingSubscribeCallback(channel);\r\n\r\n    // This operation cannot fail because the TCP protocol guarantees delivery\r\n    // so long as the connection remains open. If the connection closes,\r\n    // the server will automatically unsubscribe the client and thus complete\r\n    // the operation on the server side.\r\n    var decoratedChannelName = this._decorateChannelName(channel.name);\r\n    this.transport.emit('#unsubscribe', decoratedChannelName, options);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.unsubscribe = function (channelName) {\r\n  var channel = this.channels[channelName];\r\n\r\n  if (channel) {\r\n    if (channel.state != channel.UNSUBSCRIBED) {\r\n\r\n      this._triggerChannelUnsubscribe(channel);\r\n      this._tryUnsubscribe(channel);\r\n    }\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.channel = function (channelName, options) {\r\n  var currentChannel = this.channels[channelName];\r\n\r\n  if (!currentChannel) {\r\n    currentChannel = new SCChannel(channelName, this, options);\r\n    this.channels[channelName] = currentChannel;\r\n  }\r\n  return currentChannel;\r\n};\r\n\r\nSCClientSocket.prototype.destroyChannel = function (channelName) {\r\n  var channel = this.channels[channelName];\r\n\r\n  if (channel) {\r\n    channel.unwatch();\r\n    channel.unsubscribe();\r\n    delete this.channels[channelName];\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.subscriptions = function (includePending) {\r\n  var subs = [];\r\n  var channel, includeChannel;\r\n  for (var channelName in this.channels) {\r\n    if (this.channels.hasOwnProperty(channelName)) {\r\n      channel = this.channels[channelName];\r\n\r\n      if (includePending) {\r\n        includeChannel = channel && (channel.state == channel.SUBSCRIBED ||\r\n          channel.state == channel.PENDING);\r\n      } else {\r\n        includeChannel = channel && channel.state == channel.SUBSCRIBED;\r\n      }\r\n\r\n      if (includeChannel) {\r\n        subs.push(channelName);\r\n      }\r\n    }\r\n  }\r\n  return subs;\r\n};\r\n\r\nSCClientSocket.prototype.isSubscribed = function (channelName, includePending) {\r\n  var channel = this.channels[channelName];\r\n  if (includePending) {\r\n    return !!channel && (channel.state == channel.SUBSCRIBED ||\r\n      channel.state == channel.PENDING);\r\n  }\r\n  return !!channel && channel.state == channel.SUBSCRIBED;\r\n};\r\n\r\nSCClientSocket.prototype.processPendingSubscriptions = function () {\r\n  var self = this;\r\n\r\n  this.preparingPendingSubscriptions = false;\r\n\r\n  var pendingChannels = [];\r\n\r\n  for (var i in this.channels) {\r\n    if (this.channels.hasOwnProperty(i)) {\r\n      var channel = this.channels[i];\r\n      if (channel.state == channel.PENDING) {\r\n        pendingChannels.push(channel);\r\n      }\r\n    }\r\n  }\r\n\r\n  pendingChannels.sort(function (a, b) {\r\n    var ap = a.priority || 0;\r\n    var bp = b.priority || 0;\r\n    if (ap > bp) {\r\n      return -1;\r\n    }\r\n    if (ap < bp) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  pendingChannels.forEach(function (channel) {\r\n    self._trySubscribe(channel);\r\n  });\r\n};\r\n\r\nSCClientSocket.prototype.watch = function (channelName, handler) {\r\n  if (typeof handler != 'function') {\r\n    throw new InvalidArgumentsError('No handler function was provided');\r\n  }\r\n  this._channelEmitter.on(channelName, handler);\r\n};\r\n\r\nSCClientSocket.prototype.unwatch = function (channelName, handler) {\r\n  if (handler) {\r\n    this._channelEmitter.removeListener(channelName, handler);\r\n  } else {\r\n    this._channelEmitter.removeAllListeners(channelName);\r\n  }\r\n};\r\n\r\nSCClientSocket.prototype.watchers = function (channelName) {\r\n  return this._channelEmitter.listeners(channelName);\r\n};\r\n\r\nmodule.exports = SCClientSocket;\r\n"]},"metadata":{},"sourceType":"script"}