{"ast":null,"code":"import { Validators } from \"./library/Validator\";\nexport const userQuestions = (values, errors) => {\n  return {\n    email: {\n      value: values.email,\n      key: 'email',\n      label: 'What is your Username',\n      min: 5,\n      error: errors.email\n    },\n    password: {\n      value: values.password,\n      key: 'password',\n      label: 'What is your Password',\n      min: 5,\n      type: 'password',\n      error: errors.password\n    },\n    accept: {\n      value: values.accept,\n      key: 'accept',\n      label: 'Accept Term and Condition',\n      error: errors.accept\n    },\n    countries: {\n      value: values.country,\n      key: 'country',\n      label: 'These are the List of Country',\n      data: [{\n        value: 'India',\n        label: 'India'\n      }, {\n        value: 'USA',\n        label: 'USA'\n      }, {\n        value: 'UK',\n        label: 'UK'\n      }, {\n        value: 'Germany',\n        label: 'Germany'\n      }, {\n        value: 'Russia',\n        label: 'Russia'\n      }, {\n        value: 'Italy',\n        label: 'Italy'\n      }],\n      error: errors.country\n    }\n  };\n};\nexport default function validate(values) {\n  let errors = {};\n\n  if (Validators.required(values.email)) {\n    errors.email = \"Email is required\";\n  } else if (Validators.email(values.email)) {\n    errors.email = \"Please enter a valid email address\";\n  }\n\n  if (!values.password) {\n    errors.password = \"password is required\";\n  } else if (Validators.password(values.password)) {\n    errors.password = \"Please try Stronger Password\";\n  }\n\n  if (!values.accept || values.accept === 'true') {\n    errors.accept = \"Please Check this Box\";\n  }\n\n  if (!values.countries) {\n    errors.countries = \"Please Choose one\";\n  }\n\n  return errors;\n}\n;","map":{"version":3,"sources":["/Users/anishniroula/Documents/todo/src/userQuestions.js"],"names":["Validators","userQuestions","values","errors","email","value","key","label","min","error","password","type","accept","countries","country","data","validate","required"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,qBAAzB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC7C,SAAO;AACHC,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAEH,MAAM,CAACE,KADX;AAEHE,MAAAA,GAAG,EAAE,OAFF;AAGHC,MAAAA,KAAK,EAAE,uBAHJ;AAIHC,MAAAA,GAAG,EAAE,CAJF;AAKHC,MAAAA,KAAK,EAAEN,MAAM,CAACC;AALX,KADJ;AAQHM,IAAAA,QAAQ,EAAE;AACNL,MAAAA,KAAK,EAAEH,MAAM,CAACQ,QADR;AAENJ,MAAAA,GAAG,EAAE,UAFC;AAGNC,MAAAA,KAAK,EAAE,uBAHD;AAINC,MAAAA,GAAG,EAAE,CAJC;AAKNG,MAAAA,IAAI,EAAE,UALA;AAMNF,MAAAA,KAAK,EAAEN,MAAM,CAACO;AANR,KARP;AAgBHE,IAAAA,MAAM,EAAE;AACJP,MAAAA,KAAK,EAAEH,MAAM,CAACU,MADV;AAEJN,MAAAA,GAAG,EAAE,QAFD;AAGJC,MAAAA,KAAK,EAAE,2BAHH;AAIJE,MAAAA,KAAK,EAAEN,MAAM,CAACS;AAJV,KAhBL;AAsBHC,IAAAA,SAAS,EAAE;AACPR,MAAAA,KAAK,EAAEH,MAAM,CAACY,OADP;AAEPR,MAAAA,GAAG,EAAE,SAFE;AAGPC,MAAAA,KAAK,EAAE,+BAHA;AAIPQ,MAAAA,IAAI,EAAE,CACF;AAACV,QAAAA,KAAK,EAAE,OAAR;AAAiBE,QAAAA,KAAK,EAAE;AAAxB,OADE,EAEF;AAACF,QAAAA,KAAK,EAAE,KAAR;AAAeE,QAAAA,KAAK,EAAE;AAAtB,OAFE,EAGF;AAACF,QAAAA,KAAK,EAAE,IAAR;AAAcE,QAAAA,KAAK,EAAE;AAArB,OAHE,EAIF;AAACF,QAAAA,KAAK,EAAE,SAAR;AAAmBE,QAAAA,KAAK,EAAE;AAA1B,OAJE,EAKF;AAACF,QAAAA,KAAK,EAAE,QAAR;AAAkBE,QAAAA,KAAK,EAAE;AAAzB,OALE,EAMF;AAACF,QAAAA,KAAK,EAAE,OAAR;AAAiBE,QAAAA,KAAK,EAAE;AAAxB,OANE,CAJC;AAYPE,MAAAA,KAAK,EAAEN,MAAM,CAACW;AAZP;AAtBR,GAAP;AAqCH,CAtCM;AAwCP,eAAe,SAASE,QAAT,CAAkBd,MAAlB,EAA0B;AACrC,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIH,UAAU,CAACiB,QAAX,CAAoBf,MAAM,CAACE,KAA3B,CAAJ,EAAuC;AACnCD,IAAAA,MAAM,CAACC,KAAP,GAAe,mBAAf;AACH,GAFD,MAEO,IAAIJ,UAAU,CAACI,KAAX,CAAiBF,MAAM,CAACE,KAAxB,CAAJ,EAAoC;AACvCD,IAAAA,MAAM,CAACC,KAAP,GAAe,oCAAf;AACH;;AAED,MAAI,CAACF,MAAM,CAACQ,QAAZ,EAAsB;AAClBP,IAAAA,MAAM,CAACO,QAAP,GAAkB,sBAAlB;AACH,GAFD,MAEO,IAAGV,UAAU,CAACU,QAAX,CAAoBR,MAAM,CAACQ,QAA3B,CAAH,EAAyC;AAC5CP,IAAAA,MAAM,CAACO,QAAP,GAAkB,8BAAlB;AACH;;AACD,MAAI,CAACR,MAAM,CAACU,MAAR,IAAkBV,MAAM,CAACU,MAAP,KAAkB,MAAxC,EAAgD;AAC5CT,IAAAA,MAAM,CAACS,MAAP,GAAgB,uBAAhB;AACH;;AACD,MAAI,CAACV,MAAM,CAACW,SAAZ,EAAuB;AACnBV,IAAAA,MAAM,CAACU,SAAP,GAAmB,mBAAnB;AACH;;AACD,SAAOV,MAAP;AACH;AAAA","sourcesContent":["import {Validators} from \"./library/Validator\";\n\nexport const userQuestions = (values, errors) => {\n    return {\n        email: {\n            value: values.email,\n            key: 'email',\n            label: 'What is your Username',\n            min: 5,\n            error: errors.email\n        },\n        password: {\n            value: values.password,\n            key: 'password',\n            label: 'What is your Password',\n            min: 5,\n            type: 'password',\n            error: errors.password\n        },\n        accept: {\n            value: values.accept,\n            key: 'accept',\n            label: 'Accept Term and Condition',\n            error: errors.accept\n        },\n        countries: {\n            value: values.country,\n            key: 'country',\n            label: 'These are the List of Country',\n            data: [\n                {value: 'India', label: 'India'},\n                {value: 'USA', label: 'USA'},\n                {value: 'UK', label: 'UK'},\n                {value: 'Germany', label: 'Germany'},\n                {value: 'Russia', label: 'Russia'},\n                {value: 'Italy', label: 'Italy'},\n            ],\n            error: errors.country\n        },\n    }\n};\n\nexport default function validate(values) {\n    let errors = {};\n    if (Validators.required(values.email)) {\n        errors.email = \"Email is required\";\n    } else if (Validators.email(values.email)) {\n        errors.email = \"Please enter a valid email address\";\n    }\n\n    if (!values.password) {\n        errors.password = \"password is required\";\n    } else if(Validators.password(values.password)) {\n        errors.password = \"Please try Stronger Password\"\n    }\n    if (!values.accept || values.accept === 'true') {\n        errors.accept = \"Please Check this Box\";\n    }\n    if (!values.countries) {\n        errors.countries = \"Please Choose one\";\n    }\n    return errors;\n};\n"]},"metadata":{},"sourceType":"module"}